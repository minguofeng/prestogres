struct Value {
    char* _data;
    int   _len;    
};

class InStream {
public:
    InStream(int type) : _type(type) {
        switch (_type) {
        case INT_TYPE:
            _buffer.resize(sizeof(int));
            break;
        case VARCHAR:
            break;
        default:
            break;
        }
        
    } 
    bool read(Value &v) {
        switch (_type) {
        case INT_TYPE:
            m_fstream.read(_buffer.data(), sizeof(int));
            break;
        case VARCHAR:
        {
            int len = 0;
            m_fstream.read(&len, sizeof(int));
            if (_buffer.size() < len) {
                _buffer.resize(len);                
            }
            m_fstream.read(_buffer.data(), len);
            v._data = _buffer.data();
            v._len = len;
        }
            break;
        default:
            break;
        }
        
    }
    
private:
    int _type;
    vector<char> _buffer;
};


// T ~ int, long, double
template<typename T>
class InStream {
public:    
    bool read(T& data) {
        m_fstream.read(&data, sizeof(T));
        return true;
    }

private:
    
};

template<>
class InStream<string> {
public:    
    
};